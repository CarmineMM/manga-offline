import 'package:isar/isar.dart';
import 'package:manga_offline/domain/entities/manga_source.dart';
import 'package:manga_offline/domain/entities/source_capability.dart';

part 'manga_source_model.g.dart';

/// Isar collection representing a manga source persisted locally.
@collection
class MangaSourceModel {
  /// Auto increment primary key generated by Isar.
  Id? id;

  /// External identifier shared with the domain layer.
  @Index(unique: true)
  late String referenceId;

  /// Display name of the source.
  late String name;

  /// Optional description displayed in settings.
  String? description;

  /// Base URL used by the source implementation.
  late String baseUrl;

  /// ISO locale supported by the source.
  late String locale;

  /// Optional icon or logo URL.
  String? iconUrl;

  /// Whether the source is currently enabled by the user.
  bool isEnabled = false;

  /// Serialized source capabilities stored as enum names.
  List<String> capabilities = <String>[];

  /// Timestamp of the last successful sync.
  DateTime? lastSyncedAt;

  /// Maps the model to the domain entity representation.
  MangaSource toEntity() {
    final mappedCapabilities = capabilities
        .map(
          (value) => SourceCapability.values.firstWhere(
            (element) => element.name == value,
            orElse: () => SourceCapability.catalog,
          ),
        )
        .toList(growable: false);

    return MangaSource(
      id: referenceId,
      name: name,
      description: description,
      baseUrl: baseUrl,
      locale: locale,
      iconUrl: iconUrl,
      isEnabled: isEnabled,
      capabilities: mappedCapabilities,
      lastSyncedAt: lastSyncedAt,
    );
  }

  /// Creates a model object from the domain entity representation.
  static MangaSourceModel fromEntity(MangaSource source) {
    final model = MangaSourceModel()
      ..referenceId = source.id
      ..name = source.name
      ..description = source.description
      ..baseUrl = source.baseUrl
      ..locale = source.locale
      ..iconUrl = source.iconUrl
      ..isEnabled = source.isEnabled
      ..capabilities = source.capabilities
          .map((capability) => capability.name)
          .toList()
      ..lastSyncedAt = source.lastSyncedAt;
    return model;
  }
}
